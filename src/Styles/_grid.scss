@use "sass:math";
@use "variables";

// layouts

$breakpoints: (
    "xs": 0,
    "sm": 480px,
    "md": 720px,
    "lg": 960px,
    "xl": 1200px,
);

@mixin xs {
    @media (min-width: map-get($breakpoints, xs)) {
        @content;
    }
}

@mixin sm {
    @media (min-width: map-get($breakpoints, sm)) {
        @content;
    }
}

@mixin md {
    @media (min-width: map-get($breakpoints, md)) {
        @content;
    }
}

@mixin lg {
    @media (min-width: map-get($breakpoints, lg)) {
        @content;
    }
}

@mixin xl {
    @media (min-width: map-get($breakpoints, xl)){
        @content;
    }
}

@mixin breakpoint($bp: 0){
    @media (min-width: $bp){
        @content;
    }
}

.responsive-test{
    @include xs{
        h1 {
            font-size: variables.$font-size-lg;
        }
        .logo-icon{
            width: 18%;
        }
        .input{
            width: 75%;
            font-size: variables.$font-size-sm;
            margin-top: variables.$base-margin * 3;
        }
        .input-text{
            width: 80%;
        }
        .submit{
            font-size: variables.$font-size-sm;
        }
        .daytime-container{
            width: 90%;
            margin-top: variables.$base-margin * 4;
        }
        .output-bg{
            width: 80%;
            img{
                width: 13%;
            }
            h2{
                font-size: variables.$font-size-lg;
            }
            h3 {
                font-size: variables.$font-size-lg;
            }
            h4{
                font-size: variables.$font-size-md;
            }
        }
    }

    @include sm{
        h1 {
            font-size: variables.$font-size-lg;
        }
    }

    @include md{
        h1 {
            font-size: variables.$font-size-md;
        }
    }

    @include lg{
        h1 {
            font-size: variables.$font-size-md;
        }
    }

    @include xl{
        h1 {
            font-size: variables.$font-size-md;
        }
        border: 1px solid black;
    }

    @include breakpoint(14000px){
        color: pink;
    }
}

.container {
    width: 100%;
    height: 100%;
    max-width: 1200px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
    border: 1px solid blueviolet;
}

// grid gaps

$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1": 5px,
    "2": 10px,
    "3": 20px,
);

@each $key, $val in $grid-gaps {
    .gap-#{$key} > * {
        padding: $val;
    }
    .gap-#{$key} {
        margin-left: - $val;
        margin-right: - $val;
    }
}

// column classes
@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}
@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}